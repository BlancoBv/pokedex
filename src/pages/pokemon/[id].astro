---
import type { GetStaticPaths } from "astro";
import format from "../../assets/format"
import Layout from "../../layouts/Layout.astro";
import RadarChart from "../../components/RadarChart.vue";
import type { ChartData } from "chart.js";
import LazyImage from "../../components/Lazy-image.vue";

export const getStaticPaths = (async() => {
    const data: {results:{url:string}[]}  = await fetch ("https://pokeapi.co/api/v2/pokemon/?offset=0&limit=1302").then(res=> res.json());
    
    return data.results.map(el=> {
        const regExp= /pokemon\/(\d+)\//;
        const match = el.url.match(regExp);

        return({params:{id: match && match[1] ? match[1]:""}})});
}) satisfies GetStaticPaths;

const {id} = Astro.params


const pokemon: {stats: {base_stat:number, effort:number, stat: {name:string, url: string}}[],name:string, sprites:any, height:number, weight:number, types: {slot: number, type: {name:string, url:string}}[]} = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`).then(res=> res.json()).catch(()=> null)


const specie :{genera: {genus:string, language: {name: string, url:string}}[], flavor_text_entries: {flavor_text:string, language: {name: string, url:string}}[]}= await fetch(`https://pokeapi.co/api/v2/pokemon-species/${id}`).then(res=>res.json()).catch(()=>null)

const specieIndex = specie? specie.genera.findIndex(el=> el.language.name==="en") : null
const specieText = specieIndex && specieIndex>=0 ? specie.genera?.[specieIndex]: {genus:"", language:{ name:"", url:""}}

const flavorText = specie? specie.flavor_text_entries.filter(el=> el.language.name==="en"):null


const chartData:ChartData<"radar">  = {labels: [], datasets: [{label: "Stats", data:[], fill:true, backgroundColor:"rgba(251,146,60,0.6)"}]}

pokemon.stats.forEach(stat=> {
    chartData.labels?.push(format.upperFirstLetter(stat.stat.name));
    chartData.datasets[0].data.push(stat.base_stat)
})
---
<Layout title={`Pokemon ${pokemon.name}.`}>
    <div class="flex flex-col lg:flex-row h-full overflow-y-auto p-4 gap-4">
        <figure class="size-96">
            <LazyImage src={pokemon.sprites.other.home.front_default} alt={pokemon.name} client:load/>
        </figure>        
        <div class="mb-4 lg:me-8 flex flex-col lg:items-center lg:justify-center h-fit lg:w-96 gap-4">
            <div class="flex flex-col w-full rounded-box border-4 border-blue-300 outline outline-yellow-300 outline-8 bg-gradient-to-b from-blue-100 to-transparent backdrop-blur-sm">
                <h2 class="p-4">No. {format.fill(id? id:"")} {format.upperFirstLetter(pokemon.name)}</h2>
                <span class="divider my-0"></span>
                <span class="p-4">{specieText.genus}</span>
            </div>

            <div class="flex justify-center gap-4 flex-wrap">
                {pokemon.types.map(el=> <span class="badge badge-outline">{el.type.name}</span>)}
            </div>

            <div class="w-full p-4 rounded-box border-4 border-blue-300 outline outline-yellow-300 outline-8 bg-gradient-to-b from-blue-100 to-transparent backdrop-blur-sm">
                <span>Heigth: {pokemon.height} m</span>
                <div class="divider my-0"/>
                <span>Weight: {pokemon.height} kg</span>
            </div>
            <div class="w-full mt-2 p-4 rounded-box border-4 border-blue-300 outline outline-yellow-300 outline-8 bg-gradient-to-b from-blue-100 to-transparent backdrop-blur-sm">
                <p> {flavorText ? flavorText[0].flavor_text:""}</p>
            </div>
        </div>
        <div class="p-4 h-fit grow flex flex-col justify-center items-center rounded-box border-4 border-blue-300 outline outline-yellow-300 outline-8 bg-gradient-to-b from-blue-100 to-transparent backdrop-blur-sm">
            <h2 class="text-2xl w-full text-start">Stats</h2>
            <RadarChart data={chartData} client:visible/>
        </div>
    </div>
</Layout>